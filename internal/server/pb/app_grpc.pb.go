// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: app.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannerRotatorServiceClient is the client API for BannerRotatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotatorServiceClient interface {
	AddBannerToSlot(ctx context.Context, in *BannerAndSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveBannerFromSlot(ctx context.Context, in *BannerAndSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddClick(ctx context.Context, in *AddClickRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBanner(ctx context.Context, in *SlotAndSocialGroupRequest, opts ...grpc.CallOption) (*Banner, error)
}

type bannerRotatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotatorServiceClient(cc grpc.ClientConnInterface) BannerRotatorServiceClient {
	return &bannerRotatorServiceClient{cc}
}

func (c *bannerRotatorServiceClient) AddBannerToSlot(ctx context.Context, in *BannerAndSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/banner_rotator.BannerRotatorService/AddBannerToSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotatorServiceClient) RemoveBannerFromSlot(ctx context.Context, in *BannerAndSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/banner_rotator.BannerRotatorService/RemoveBannerFromSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotatorServiceClient) AddClick(ctx context.Context, in *AddClickRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/banner_rotator.BannerRotatorService/AddClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotatorServiceClient) GetBanner(ctx context.Context, in *SlotAndSocialGroupRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/banner_rotator.BannerRotatorService/GetBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotatorServiceServer is the server API for BannerRotatorService service.
// All implementations must embed UnimplementedBannerRotatorServiceServer
// for forward compatibility
type BannerRotatorServiceServer interface {
	AddBannerToSlot(context.Context, *BannerAndSlotRequest) (*empty.Empty, error)
	RemoveBannerFromSlot(context.Context, *BannerAndSlotRequest) (*empty.Empty, error)
	AddClick(context.Context, *AddClickRequest) (*empty.Empty, error)
	GetBanner(context.Context, *SlotAndSocialGroupRequest) (*Banner, error)
	mustEmbedUnimplementedBannerRotatorServiceServer()
}

// UnimplementedBannerRotatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBannerRotatorServiceServer struct {
}

func (UnimplementedBannerRotatorServiceServer) AddBannerToSlot(context.Context, *BannerAndSlotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerToSlot not implemented")
}
func (UnimplementedBannerRotatorServiceServer) RemoveBannerFromSlot(context.Context, *BannerAndSlotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBannerFromSlot not implemented")
}
func (UnimplementedBannerRotatorServiceServer) AddClick(context.Context, *AddClickRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClick not implemented")
}
func (UnimplementedBannerRotatorServiceServer) GetBanner(context.Context, *SlotAndSocialGroupRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (UnimplementedBannerRotatorServiceServer) mustEmbedUnimplementedBannerRotatorServiceServer() {}

// UnsafeBannerRotatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotatorServiceServer will
// result in compilation errors.
type UnsafeBannerRotatorServiceServer interface {
	mustEmbedUnimplementedBannerRotatorServiceServer()
}

func RegisterBannerRotatorServiceServer(s grpc.ServiceRegistrar, srv BannerRotatorServiceServer) {
	s.RegisterService(&BannerRotatorService_ServiceDesc, srv)
}

func _BannerRotatorService_AddBannerToSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerAndSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServiceServer).AddBannerToSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotator.BannerRotatorService/AddBannerToSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServiceServer).AddBannerToSlot(ctx, req.(*BannerAndSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotatorService_RemoveBannerFromSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerAndSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServiceServer).RemoveBannerFromSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotator.BannerRotatorService/RemoveBannerFromSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServiceServer).RemoveBannerFromSlot(ctx, req.(*BannerAndSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotatorService_AddClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServiceServer).AddClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotator.BannerRotatorService/AddClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServiceServer).AddClick(ctx, req.(*AddClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotatorService_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotAndSocialGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServiceServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner_rotator.BannerRotatorService/GetBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServiceServer).GetBanner(ctx, req.(*SlotAndSocialGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerRotatorService_ServiceDesc is the grpc.ServiceDesc for BannerRotatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerRotatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner_rotator.BannerRotatorService",
	HandlerType: (*BannerRotatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBannerToSlot",
			Handler:    _BannerRotatorService_AddBannerToSlot_Handler,
		},
		{
			MethodName: "RemoveBannerFromSlot",
			Handler:    _BannerRotatorService_RemoveBannerFromSlot_Handler,
		},
		{
			MethodName: "AddClick",
			Handler:    _BannerRotatorService_AddClick_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _BannerRotatorService_GetBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
